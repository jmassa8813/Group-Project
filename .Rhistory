View(modm2)
qplot(m2$fitted.value, violent, data=modm2) + geom_abline(intercept = 0, slope = 1, color="hot pink") + ggtitle("Fit Plot")
qplot(m2$fitted.value, violent, data=Guns) + geom_abline(intercept = 0, slope = 1, color="hot pink") + ggtitle("Fit Plot")
qplot(m2$fitted.value, violent, data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, log(violent), data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, log(violent), data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, violent, data=modm1) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(mlam$fitted.value, ln(violent), data=modm2) +geom_smooth() +ggtitle("Fit Plot box-cox transformation")
qplot(m2$fitted.value, lm(violent), data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, violent, data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, violent, data=Guns) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, violent, data=modm1) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, violent, data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, log(violent) , data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
View(modm2)
names(modm2)
qplot(m2$fitted.value, log(violent) , data=modm2) +geom_smooth() +ggtitle("Fit Plot log transformation")
qplot(m2$fitted.value, violent, data=modm1) +geom_smooth() +ggtitle("Fit Plot log transformation")
lam <- lambda$lambda
library(car)
(lambda <- powerTransform(m1))
lam <- lambda$lambda
mlam <- lm(violent^lam ~ ., Guns)
modlam <- fortify(mlam)
qplot(mlam$fitted.value, violent, data=modlam) +geom_smooth() +ggtitle("Fit Plot box-cox transformation")
View(modm1)
qplot(mlam$fitted.value, violent^lam , data=modlam) +geom_smooth() +ggtitle("Fit Plot box-cox transformation")
qplot(mlam$fitted.value, violent^lam , data=modlam) +geom_smooth() +ggtitle("Fit Plot box-cox transformation")
qplot(mlam$fitted.value, violent, data=modm1) +geom_smooth() +ggtitle("Fit Plot box-cox transformation")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("AER", repos = "http://cran.us.r-project.org", type = "source")
options(warn=-1)
library(AER)
data("Guns")
names(Guns)
summary(Guns)
x <- sort(Guns$violent)
med <- median(Guns$violent)
m <- mean(Guns$violent)
std <- sd(Guns$violent)
oldpar <- par(mfrow=c(2,2))
#Price Histogram
hist(Guns$violent,main="Histogram", freq=FALSE)
curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=0.25,add = TRUE)
#Density Plot
plot(density(Guns$violent),main="Density Plot")
curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=0.25,add = TRUE)
#Sortplot
plot(sort(Guns$violent),main="Sort Plot")
#QQ-Plot
qqnorm(Guns$violent)
qqline(Guns$violent, col="blue")
par(oldpar)
library("GGally")
ggpairs(Guns, columns = c(13, 3:11, 2), mapping = aes(color = law),lower=list(combo=wrap("facethist", binwidth=10)))
mOrig <- lm(violent~., data = Guns)
library(ggplot2) #load ggplot 2 package
plot1 <- qplot(mOrig$fitted.value, violent, data=Guns) +
geom_abline(intercept = 0, slope = 1, color="hot pink") +
ggtitle("Fit Plot")
plot2 <- ggplot(mOrig, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Residual Plot")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
mLog <- lm(log(violent)~., data = Guns)
Plot1 <- qplot(mLog$fitted.value, violent, data=Guns) +geom_smooth() +ggtitle("Fit Plot log transformation")
plot2 <- ggplot(mLog, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Log Transformation Residual Plot")
grid.arrange(plot1, plot2, ncol=2)
library(car)
(lambda <- powerTransform(mOrig))
lam <- lambda$lambda
mBC <- lm(violent^lam ~ ., Guns)
plot1 <- qplot(mBC$fitted.value, violent, data=Guns) +geom_smooth() + ggtitle("Fit Plot Box-Cox Transformation")
plot2 <- ggplot(mBC, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Box-Cox Transformation Residual Plot")
grid.arrange(plot1, plot2, ncol = 2)
modmOrig <- fortify(mOrig)
modmLog <- fortify(mLog)
modmBC <- fortify(mBC)
p1 <- qplot(sample = scale(.resid), data = modmOrig) + geom_abline(intercept = 0,
slope = 1, color = "red") + labs(title = "Normal QQ-Plot - Untransformed violent", y = "Residuals")
p2 <- qplot(sample = scale(.resid), data = modmLog) + geom_abline(intercept = 0,
slope = 1, color = "red") + labs(title = "Normal QQ-Plot - Log Tranformed violent", y = "Residuals")
p3 <- qplot(sample = scale(.resid), data = modmBC) + geom_abline(intercept = 0,
slope = 1, color = "red") + labs(title = "Normal QQ-Plot - Box-Cox", y = "Residuals")
grid.arrange(p1, p2, p3, nrow = 3)
p4 <- qplot(scale(.resid), data = modmOrig, geom = "blank") + geom_line(aes(y = ..density..,
colour = "Empirical"), stat = "density") + stat_function(fun = dnorm, aes(colour = "Normal")) + geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = "Density", values = c("red", "blue")) + theme(legend.position = c(0.85, 0.85)) + labs(title = "Untransformed violent", y = "Residuals")
p5 <- qplot(scale(.resid), data = modmLog, geom = "blank") + geom_line(aes(y = ..density..,
colour = "Empirical"), stat = "density") + stat_function(fun = dnorm, aes(colour = "Normal"))+ geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = "Density", values = c("red", "blue")) + theme(legend.position = c(0.85, 0.85)) + labs(title = "Log Tranformed violent", y = "Residuals")
p6 <- qplot(scale(.resid), data = modmBC, geom = "blank") + geom_line(aes(y = ..density..,
colour = "Empirical"), stat = "density") + stat_function(fun = dnorm, aes(colour = "Normal"))+ geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = "Density", values = c("red", "blue")) + theme(legend.position = c(0.85, 0.85)) + labs(title = "Box-Cox Tranformed violent", y = "Residuals")
grid.arrange(p4, p5, p6, nrow = 3)
shapiro.test(residuals(mOrig))
shapiro.test(residuals(mLog))
shapiro.test(residuals(mBC))
mBCStep <- step(mBC)
mLogStep <- step(mLog)
compareCoefs(mBC, mBCStep, mLogStep, se = FALSE)
anova(mBC, mBCStep)
anova(mLog, mLogStep)
library(car)
influencePlot(mBC, id.method=cooks.distance(mBC), id.n=4)
Guns1 <- Guns
Guns1$state <- as.numeric(Guns1$state)
Guns1$year <- as.numeric(Guns1$year)
Guns1$law <- as.numeric(Guns1$law)
Guns1$prisoners <- as.numeric(Guns1$prisoners)
stripchart(data.frame(scale(Guns1)),
vertical = TRUE,
method = "jitter")
mLogCauc <- lm(violent ~ year +
murder +
robbery +
prisoners +
afam +
log(cauc) +
male +
population +
income +
density +
state +
law,
data = Guns)
mLogCauc <- step(mLogCauc)
library(DAAG)
seed <- round(runif(1, min=0, max=100))
CVlm(data = Guns,
form.lm=mBCStep,
m=3,
printit=F)
df <- data.frame(mse.mOrig=NULL,
mse.mLog=NULL,
mse.mBCStep=NULL,
mse.mBC=NULL,
mse.mLogStep=NULL)
for (i in 1:10) {
seed <- round(runif(1, min=0, max=100))
oldpar <- par(mfrow=c(1,5))
mse.mOrig <- CVlm(data = Guns,
form.lm=mOrig,
m=4,
seed=seed,
printit=F,
main = "mOrig")
mse.mLog <- CVlm(data = Guns,
form.lm=mLog,
m=4,
seed=seed,
printit=F,
main = "mLog")
mse.mBCStep <- CVlm(data = Guns,
form.lm=mBCStep,
m=4,
seed=seed,
printit=F,
main = "mBCStep")
mse.mBC <- CVlm(data = Guns,
form.lm=mBC,
m=4,
seed=seed,
printit=F,
main = "mBC")
mse.mLogStep <- CVlm(data = Guns,
form.lm=mLogStep,
m=4,
seed=seed,
printit=F,
main = "mLogStep")
par(oldpar)
df.temp <- data.frame(mse.mOrig=attr(mse.mOrig, "ms"),
mse.mLog=attr(mse.mLog, "ms"),
mse.mBCStep=attr(mse.mBCStep, "ms"),
mse.mBC=attr(mse.mBC, "ms"),
mse.mLogStep=attr(mse.mLogStep, "ms"))
df <- rbind(df,df.temp)
}
df
compareCoefs(mBC, mBCStep, mLog, mLogStep, se = FALSE)
anova(mBCStep, mBC)
anova(mBC, mBCStep)
anova(mBCStep, mBCS)
anova(mBCStep, mBC)
anova(mLogStep, mLog)
anova(mBCStep, mBC)
anova(mLogStep, mLog)
str(Guns)
knit_with_parameters('~/Desktop/Rutgers/Data Analysis/Group Project/Violas Group Presentation V2.Rmd')
install.packages("revealjs")
library("revealjs", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knit_with_parameters('~/Desktop/Rutgers/Data Analysis/Group Project/Violas Group Presentation V2.Rmd')
knit_with_parameters('~/Desktop/Rutgers/Data Analysis/Group Project/Violas Group Presentation V2.Rmd')
knitr::opts_chunk$set(echo = TRUE)
#install.packages("AER", repos = "http://cran.us.r-project.org", type = "source")
options(warn=-1)
library(AER)
data("Guns")
names(Guns)
summary(Guns)
library("revealjs", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knit_with_parameters('~/Desktop/Rutgers/Data Analysis/Group Project/Viola Group Presentation.Rmd')
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
author('Group Project')
<!-- Limit image width and height -->
<style type='text/css'>
img {
max-height: 560px;
max-width: 964px;
}
</style>
<!-- Center image on slide -->
<script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.min.js"></script>
<script type='text/javascript'>
$(function() {
$("p:has(img)").addClass('centered');
});
</script>
summary(Guns)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
#install.packages("AER", repos = "http://cran.us.r-project.org", type = "source")
options(warn=-1)
library(AER)
data("Guns")
names(Guns)
# Chunk 3
str(Guns)
# Chunk 4
summary(Guns)
install.packages("kableExtra")
library(kableExtra)
Kable(str(Guns))
kable(summary(Guns)) %>%
kable_styling() %>%
scroll_box(width = "1000px", height = "100%")
library("GGally")
lam <- lambda$lambda
mBC <- lm(violent^lam ~ ., Guns)
library(car)
(lambda <- powerTransform(mOrig))
lam <- lambda$lambda
mBC <- lm(violent^lam ~ ., Guns)
lam <- lambda$lambda
mBC <- lm(violent^lam ~ ., Guns)
library(car)
(lambda <- powerTransform(mOrig))
#install.packages("kableExtra")
library(kableExtra)
author('Group Project')
knitr::opts_chunk$set(echo = TRUE)
#install.packages("AER", repos = "http://cran.us.r-project.org", type = "source")
options(warn=-1)
library(AER)
data("Guns")
names(Guns)
summary(Guns)
x <- sort(Guns$violent)
med <- median(Guns$violent)
m <- mean(Guns$violent)
std <- sd(Guns$violent)
oldpar <- par(mfrow=c(2,2))
#Price Histogram
hist(Guns$violent,main="Histogram", freq=FALSE)
curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=0.25,add = TRUE)
#Density Plot
plot(density(Guns$violent),main="Density Plot")
curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=0.25,add = TRUE)
#Sortplot
plot(sort(Guns$violent),main="Sort Plot")
#QQ-Plot
qqnorm(Guns$violent)
qqline(Guns$violent, col="blue")
par(oldpar)
library("GGally")
ggpairs(Guns, columns = c(13, 3:11, 2), mapping = aes(color = law),lower=list(combo=wrap("facethist", binwidth=10)))
mOrig <- lm(violent~., data = Guns)
library(ggplot2) #load ggplot 2 package
plot1 <- qplot(mOrig$fitted.value, violent, data=Guns) +
geom_abline(intercept = 0, slope = 1, color="hot pink") +
ggtitle("Fit Plot")
plot2 <- ggplot(mOrig, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Residual Plot")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
mLog <- lm(log(violent)~., data = Guns)
Plot1 <- qplot(mLog$fitted.value, violent, data=Guns) +geom_smooth() +ggtitle("Fit Plot log transformation")
plot2 <- ggplot(mLog, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Log Transformation Residual Plot")
grid.arrange(plot1, plot2, ncol=2)
library(car)
(lambda <- powerTransform(mOrig))
lam <- lambda$lambda
mBC <- lm(violent^lam ~ ., Guns)
shapiro.test(residuals(mOrig),residuals(mLog),residuals(mBC))
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
a
a(1)
a(1,0)
a.1
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
kable(a,b,c)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
kable(a,b,c) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a,b,c)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a$statistic,b$statistic,c$statistic)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a$statistic,b$statistic,c$statistic)
(e)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value,a$method,b$method,c$method,a$data.name,b$data.name,c$data.name)
(e)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value,a$method,b$method,c$method,a$data.name,b$data.name,c$data.name)
write.table(e)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value,,a$data.name,b$data.name,c$data.name)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- data.frame(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value,a$data.name,b$data.name,c$data.name)
write.table(e)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$data.name,b$data.name,c$data.name,a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value))
e
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$data.name,b$data.name,c$data.name,a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value))
e <- as.table(e)
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$data.name,b$data.name,c$data.name,a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value))
(e <- as.table(e))
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$data.name,b$data.name,c$data.name,a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value),ncol=3,byrow=TRUE)
(e <- as.table(e))
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$data.name,b$data.name,c$data.name,a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value),ncol=3,byrow=TRUE)
colnames(e) <- c("Shapiro(mOrig)","Shapiro(mLog)","Shapiro(mBC)")
rownames(e) <- c("data","W","p-value")
(e <- as.table(e))
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value),ncol=3,byrow=TRUE)
colnames(e) <- c("Shapiro(mOrig)","Shapiro(mLog)","Shapiro(mBC)")
rownames(e) <- c(W","p-value")
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value),ncol=3,byrow=TRUE)
colnames(e) <- c("Shapiro(mOrig)","Shapiro(mLog)","Shapiro(mBC)")
rownames(e) <- c("W","p-value")
(e <- as.table(e))
kable(smBCStep <- step(mBC)) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
# Chunk 1
#install.packages("kableExtra")
# Chunk 2
library(kableExtra)
# Chunk 3: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 4
#install.packages("AER", repos = "http://cran.us.r-project.org", type = "source")
options(warn=-1)
library(AER)
data("Guns")
names(Guns)
# Chunk 5
str(Guns)
# Chunk 6
kable(summary(Guns)) %>%
kable_styling() %>%
scroll_box(width = "1000px", height = "100%")
# Chunk 7
x <- sort(Guns$violent)
med <- median(Guns$violent)
m <- mean(Guns$violent)
std <- sd(Guns$violent)
oldpar <- par(mfrow=c(2,2))
#Price Histogram
hist(Guns$violent,main="Histogram", freq=FALSE)
curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=0.25,add = TRUE)
#Density Plot
plot(density(Guns$violent),main="Density Plot")
curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=0.25,add = TRUE)
#Sortplot
plot(sort(Guns$violent),main="Sort Plot")
#QQ-Plot
qqnorm(Guns$violent)
qqline(Guns$violent, col="blue")
par(oldpar)
# Chunk 8
library("GGally")
# Chunk 9
ggpairs(Guns, columns = c(13, 3:11, 2), mapping = aes(color = law),lower=list(combo=wrap("facethist", binwidth=10)))
# Chunk 10
mOrig <- lm(violent~., data = Guns)
library(ggplot2) #load ggplot 2 package
plot1 <- qplot(mOrig$fitted.value, violent, data=Guns) +
geom_abline(intercept = 0, slope = 1, color="hot pink") +
ggtitle("Fit Plot")
plot2 <- ggplot(mOrig, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Residual Plot")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
# Chunk 11
mLog <- lm(log(violent)~., data = Guns)
Plot1 <- qplot(mLog$fitted.value, violent, data=Guns) +geom_smooth() +ggtitle("Fit Plot log transformation")
plot2 <- ggplot(mLog, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Log Transformation Residual Plot")
grid.arrange(plot1, plot2, ncol=2)
# Chunk 12
library(car)
lambda <- powerTransform(mOrig)
# Chunk 13
lam <- lambda$lambda
mBC <- lm(violent^lam ~ ., Guns)
# Chunk 14
plot1 <- qplot(mBC$fitted.value, violent, data=Guns) +geom_smooth() + ggtitle("Fit Plot Box-Cox Transformation")
plot2 <- ggplot(mBC, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept=0, color="dark blue", linetype="dashed") +
ggtitle("Box-Cox Transformation Residual Plot")
grid.arrange(plot1, plot2, ncol = 2)
# Chunk 15
lambda
# Chunk 16
modmOrig <- fortify(mOrig)
modmLog <- fortify(mLog)
modmBC <- fortify(mBC)
p1 <- qplot(sample = scale(.resid), data = modmOrig) + geom_abline(intercept = 0,
slope = 1, color = "red") + labs(title = "Normal QQ-Plot - Untransformed violent", y = "Residuals")
p2 <- qplot(sample = scale(.resid), data = modmLog) + geom_abline(intercept = 0,
slope = 1, color = "red") + labs(title = "Normal QQ-Plot - Log Tranformed violent", y = "Residuals")
p3 <- qplot(sample = scale(.resid), data = modmBC) + geom_abline(intercept = 0,
slope = 1, color = "red") + labs(title = "Normal QQ-Plot - Box-Cox", y = "Residuals")
grid.arrange(p1, p2, p3, nrow = 3)
# Chunk 17
p4 <- qplot(scale(.resid), data = modmOrig, geom = "blank") + geom_line(aes(y = ..density..,
colour = "Empirical"), stat = "density") + stat_function(fun = dnorm, aes(colour = "Normal")) + geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = "Density", values = c("red", "blue")) + theme(legend.position = c(0.85, 0.85)) + labs(title = "Untransformed violent", y = "Residuals")
p5 <- qplot(scale(.resid), data = modmLog, geom = "blank") + geom_line(aes(y = ..density..,
colour = "Empirical"), stat = "density") + stat_function(fun = dnorm, aes(colour = "Normal"))+ geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = "Density", values = c("red", "blue")) + theme(legend.position = c(0.85, 0.85)) + labs(title = "Log Tranformed violent", y = "Residuals")
p6 <- qplot(scale(.resid), data = modmBC, geom = "blank") + geom_line(aes(y = ..density..,
colour = "Empirical"), stat = "density") + stat_function(fun = dnorm, aes(colour = "Normal"))+ geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = "Density", values = c("red", "blue")) + theme(legend.position = c(0.85, 0.85)) + labs(title = "Box-Cox Tranformed violent", y = "Residuals")
grid.arrange(p4, p5, p6, nrow = 3)
# Chunk 18
a <- shapiro.test(residuals(mOrig))
b <- shapiro.test(residuals(mLog))
c <- shapiro.test(residuals(mBC))
e <- matrix(c(a$statistic,b$statistic,c$statistic, a$p.value,b$p.value,c$p.value),ncol=3,byrow=TRUE)
colnames(e) <- c("Shapiro(mOrig)","Shapiro(mLog)","Shapiro(mBC)")
rownames(e) <- c("W","p-value")
(e <- as.table(e))
kable(smBCStep <- step(mBC)) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
mBCStep <- step(mBC)
style="height:120px;width:120px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"
kable(cbind(smBCStep <- step(mBC)), "html") %>%
kable_styling() %>%
scroll_box(width = "500px", height = "200px")
smBCStep <- step(mBC))
smBCStep <- step(mBC)
smBCStep <- step(mBC)
help(step)
